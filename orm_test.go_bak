package porm

import (
	"context"
	"fmt"
	"testing"
	"time"

	_ "github.com/go-sql-driver/mysql"
	"github.com/yongpi/putil/psql"
)

func init() {
	simpleConfig := SimpleStorageConfig{
		DriverName:     "mysql",
		DataSourceName: "root:peiyongkang@tcp(127.0.0.1:3306)/test?charset=utf8",
		HolderType:     psql.Question,
		StorageName:    "test",
	}

	RegisterSimpleStorage(simpleConfig)

	var list []*SimpleStorageConfig
	mc := SimpleStorageConfig{
		DriverName:     "mysql",
		DataSourceName: "root:peiyongkang@tcp(127.0.0.1:3306)/test?charset=utf8",
		HolderType:     psql.Question,
	}
	list = append(list, &mc)

	sc := SimpleStorageConfig{
		DriverName:     "mysql",
		DataSourceName: "root:peiyongkang@tcp(127.0.0.1:3306)/test?charset=utf8",
		HolderType:     psql.Question,
	}
	list = append(list, &sc)

	sc2 := SimpleStorageConfig{
		DriverName:     "mysql",
		DataSourceName: "root:peiyongkang@tcp(127.0.0.1:3306)/test?charset=utf8",
		HolderType:     psql.Question,
	}
	list = append(list, &sc2)

	msc := MasterSlaveStorageConfig{StorageName: "ms", DBConfigs: list}

	RegisterMasterSlaveStorage(msc)
}

type AlbumAuthorModel struct {
	ID        int64 `porm:"pk"`
	Name      string
	Artwork   string
	Bio       string
	MemberID  NullInt64
	Career    string
	CreatedAt Time
	UpdatedAt Time `porm:"readonly"`
}

func (m *AlbumAuthorModel) TableName() string {
	return "album_author"
}

func TestSimple(t *testing.T) {
	var m AlbumAuthorModel
	ctx := context.Background()
	st := psql.Select("*").Where(psql.Eq{"id": 1})

	err := ORM().Select(ctx, st, &m)
	if err != nil {
		t.Error(err)
	}

	var list []*AlbumAuthorModel
	st = psql.Select("*").Where(psql.Eq{"id": []int64{1, 2}})
	err = ORM().Select(ctx, st, &list)
	if err != nil {
		t.Error(err)
	}

	m.Name = "up"
	m.MemberID.SetInt64(123)
	m.CreatedAt.SetTime(time.Now())

	result, err := ORM().UpdateModel(ctx, &m)
	if err != nil {
		t.Error(err)
	}
	fmt.Println(result.RowsAffected())

	//m.ID = 3
	//m.CreatedAt.BeNull()
	//
	//result, err = ORM().Insert(ctx, &m)
	//if err != nil {
	//	t.Error(err)
	//}
	//fmt.Println(result.RowsAffected())

	list[0].ID = 4
	list[1].ID = 5

	result, err = ORM().Insert(ctx, &list)
	if err != nil {
		t.Error(err)
	}
	fmt.Println(result.RowsAffected())

}

func TestMasterSlave(t *testing.T) {
	var m AlbumAuthorModel
	ctx := context.Background()
	st := psql.Select("*").Where(psql.Eq{"id": 1})

	err := NORM("ms").Select(ctx, st, &m)
	if err != nil {
		t.Error(err)
	}

	m.Name = "up111"
	m.MemberID.SetInt64(123)
	m.CreatedAt.SetTime(time.Now())

	result, err := NORM("ms").UpdateModel(ctx, &m)
	if err != nil {
		t.Error(err)
	}
	fmt.Println(result.RowsAffected())

}

func TestOrm_Transaction(t *testing.T) {
	ctx := context.Background()
	err := ORM().Transaction(ctx, func(ctx context.Context, orm *orm) error {
		var m AlbumAuthorModel

		st := psql.Select("*").Where(psql.Eq{"id": 1})
		err := orm.Select(ctx, st, &m)
		if err != nil {
			return err
		}

		m.MemberID.SetInt64(1111)
		_, err = orm.UpdateModel(ctx, &m)
		if err != nil {
			return err
		}

		_, err = ORM().Insert(ctx, &m)
		if err != nil {
			return err
		}
		return nil
	})

	if err != nil {
		t.Error(err)
	}
}
